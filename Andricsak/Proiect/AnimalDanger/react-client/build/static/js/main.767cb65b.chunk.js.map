{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/AddAnimal.js","components/ViewAnimals.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","AddAnimal","handleChange","handleSubmit","event","value","target","form","dataToPost","FormData","object","forEach","key","Number","console","log","json","JSON","stringify","axios","method","url","headers","data","then","response","catch","error","finally","Form","onSubmit","Col","FormGroup","Label","Input","type","id","placeholder","step","for","Button","React","ViewAnimals","animalList","loading","zoom","populateAnimalData","fetch","Map","center","style","height","TileLayer","map","animal","Marker","position","lat","long","Popup","partitionKey","App","exact","path","component","Boolean","window","location","hostname","match","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.767cb65b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Animal danger</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/AddAnimal\">Add an Animal</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/ViewAnimals\">View animals</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Welcome to animal danger website!</h1>\r\n        <p>Here you can view if dangerous animals are inside your city!</p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Container, Col, Form,\r\n  FormGroup, Label, Input,\r\n  Button,\r\n} from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nexport class AddAnimal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);   \r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        const form = event.target;\r\n        const dataToPost = new FormData(form);\r\n  \r\n        // empty object\r\n        var object = {};\r\n        dataToPost.forEach(function (value,key) {\r\n          if(key == \"name\")\r\n          {\r\n            object[key] = value;\r\n          }\r\n          else\r\n          {\r\n            object[key] = Number(value);\r\n          }\r\n          \r\n          console.log(key +\": \" + value)\r\n        });\r\n      \r\n        var json =JSON.stringify(object);\r\n        console.log(json)\r\n        axios({\r\n        method: 'post', \r\n        url: 'https://animaldangerapi.azurewebsites.net/api/Animal', \r\n        headers:{'Content-Type': 'application/json; charset=utf-8'},\r\n        data: json  \r\n        })\r\n        .then(function (response) {\r\n                console.log(\"The response of the server: \"+response.data);\r\n        })\r\n        .catch(function (error) {\r\n            // handle error\r\n            console.log(error);\r\n        })\r\n        .finally(function () {\r\n                //\r\n        });\r\n      \r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <Container className=\"AddAnimal\">\r\n          <h2>Add an animal</h2>\r\n          <Form className=\"form\" onSubmit={this.handleSubmit}>\r\n            <Col>\r\n              <FormGroup>\r\n                <Label>Animal id</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"id\"\r\n                  id=\"animalId\"\r\n                  placeholder=\"1\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col>\r\n              <FormGroup>\r\n                <Label>Latitude</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"lat\"\r\n                  placeholder=\"latitude...\"\r\n                  step=\"any\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col>\r\n              <FormGroup>\r\n                <Label>Longitude</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"long\"\r\n                  placeholder=\"longitutde...\"\r\n                  step=\"any\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col>\r\n              <FormGroup>\r\n                <Label for=\"AnimalName\">Animal name</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"animalName\"\r\n                  placeholder=\"Animal name\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col>\r\n              <FormGroup>\r\n                <Label for=\"AnimalType\">Animal type</Label>\r\n                <Input type=\"select\" name=\"type\" id=\"animalType\">\r\n                  <option value=\"0\">Bear</option>\r\n                  <option value=\"1\">Fox</option>\r\n                  <option value=\"2\">Wolf</option>\r\n                </Input>\r\n              </FormGroup>\r\n            </Col>\r\n            <Button>Submit</Button>\r\n          </Form>\r\n        </Container>\r\n        );\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n\r\nexport class ViewAnimals extends  Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { animalList: [], loading: true ,zoom: 13};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateAnimalData();\r\n  }\r\n\r\n  async populateAnimalData() {\r\n    const response = await fetch('https://animaldangerapi.azurewebsites.net/api/Animal');\r\n    const data = await response.json();\r\n    console.log(data);\r\n    this.setState({ animalList: data, loading: false });\r\n    \r\n  }\r\n  render() {\r\n    const centerPos = [45.748871,21.208679];\r\n    console.log(this.state.animalList);\r\n    return (\r\n\r\n      <Map center={centerPos} zoom={this.state.zoom}\r\n      style={{ height: \"88vh\" }} >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {this.state.animalList.map(animal =>       \r\n        <Marker position={[animal.lat,animal.long]} key={animal.id}>     \r\n          <Popup>\r\n            Id: {animal.id} <br /> Name: {animal.name}, Type: {animal.partitionKey}\r\n          </Popup>\r\n        </Marker>\r\n        )}\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport { Route } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { Home } from './components/Home';\nimport { AddAnimal } from './components/AddAnimal';\nimport { ViewAnimals } from './components/ViewAnimals';\n\nexport default class App extends React.Component {\n  static displayName = App.name;\n\n  render() {\n    return (\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/AddAnimal' component={AddAnimal} />\n        <Route path='/ViewAnimals' component={ViewAnimals} />\n      </Layout>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n    <App />\n  </BrowserRouter>,\n  rootElement);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}